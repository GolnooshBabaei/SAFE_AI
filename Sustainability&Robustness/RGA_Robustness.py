import numpy as np
import pandas as pd

class SecurityRobustness:
    '''
    Function for the RGA (Rank Graduation Accuracy) measure computation
    Inputs: 
    y -> observed target variable values; 
    yhat -> predictions generated by the applied selected model.
    '''
    def __init__(self):
        pass

    def rga(self, y, yhat):
        df = pd.concat([y,yhat], axis=1, keys=['y', 'yhat'])
        ryhat = yhat.rank(method="min")  # ranks of the predicted values
        df["ryhat"] = ryhat
        support = df.groupby('ryhat')['y'].mean().reset_index(name='support')  # replace the observed target variable value corresponding to the same predictive values with their mean 
        rord = list(range(len(y)))
        for jj in range(len(rord)):
            for ii in range(len(support)):
                    if ryhat[jj]== support['ryhat'][ii]:
                        rord[jj] = support['support'][ii]
        ystar = sorted(rord, reverse=True)  # re-order the observed target variable values with respect to the corresponding predicted values
        I = list(range(1,len(y)+1))
        conc = 2*sum([I[i]*ystar[i] for i in range(len(I))])   # first term of the RGA numerator (concordance)
        dec= 2*sum([sorted(y, reverse=True)[i]*I[i] for i in range(len(I))]) # second term of the RGA numerator and denominator (dual Lorenz)
        inc = 2*sum([sorted(y)[i]*I[i] for i in range(len(I))]) # first term of the RGA denominator (Lorenz)
        RGA=(conc-dec)/(inc-dec)
        return RGA      